trigger:
  branches:
    include:
    - refs/heads/main
    - refs/heads/release/*

pool:
  vmImage: ubuntu-latest

parameters:
  - name: deployDev
    displayName: Deploy to Dev
    type: boolean
    default: false

  - name: deployQA
    displayName: Deploy to QA (must Deploy to Dev too)
    type: boolean
    default: false

resources:
  repositories:
  - repository: self
  - repository: platform
    type: git
    name: 'CodeBuildDeploy.Platform'

variables:
- group: CodeBuildDeploy-Global

- template: azureDevOps/variables-infrastructure.yml@platform
- template: variables-infrastructure.yml

- template: azureDevOps/variables-build.yml@platform
- template: variables-env.yml
  parameters:
    isManual: ${{ variables['build.type.manual'] }}
    isRelease: ${{ variables['build.type.release'] }}
    deployDev: ${{ parameters.deployDev }}
    deployQA: ${{ parameters.deployQA }}

- template: azureDevOps/variables-versioning.yml@platform
  parameters:
    buildTypeRelease: ${{ variables['build.type.release'] }}
    majorVersion: 1
    minorVersion: 0

- name: Service.Blogs.NameKebabCase
  value: 'codebuilddeploy-blogs'
- name: Service.Blogs.Version
  value: 1.1.37

- name: Service.Web.NameKebabCase
  value: 'codebuilddeploy'
- name: Service.Web.Version
  value: 1.1.19

name: $[variables['Build.Number']]

stages:
- stage: Build_Umbrella
  displayName: Build Umbrella
  jobs:
  - job: Init_Vars
    displayName: Init Vars
    steps:
    - checkout: self
      displayName: 'Checkout Repo'

    - bash: |
        echo "build.type.release = $(build.type.release)"
        echo "SourceVersion = $(Build.SourceVersion)"
        echo "SourceVersion.Short = $(Build.SourceVersion.Short)"
        echo "Build Number = $(Build.Number)"
        echo "Version Assembly = $(Version.Assembly)"
        echo "Version File = $(Version.File)"
        echo "Version Informational = $(Version.Informational)"
        echo "Version Major = $(Version.Major)"
        echo "Version Minor = $(Version.Minor)"
        echo "Version Patch = $(Version.Patch)"
        echo "Blogs Service Version = $(Service.Blogs.Version)"
      displayName: Output Version

  - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    - job: Tag_Version
      displayName: Tag Version
      dependsOn:
        - Init_Vars
      steps:
      - checkout: self
        displayName: 'Checkout Repo'
        persistCredentials: true

      - script: |
          git tag $(Build.Number)
          git push origin $(Build.Number)
        workingDirectory: $(Build.SourcesDirectory)
        displayName: Tag Version in Git

- ${{ if eq(variables['deploy.dev'], 'true') }}:
  - stage: DeployDev
    displayName: Deploy NonProd Development Platform
    dependsOn:
    - Build_Umbrella
    variables:
    - group: CodeBuildDeploy-NonProd-Dev
    - name: Deploy.PlatformEnv
      value: nonprod
    - ${{ if ne(variables['build.type.release'], 'true') }}:
      - name: Deploy.AppEnvShortCap
        value: Dyn
      - name: Deploy.AppEnvShort
        value: dyn
      - name: Deploy.AppEnv
        value: "dyn-${{ variables['Build.SourceVersion.Short'] }}"
    - ${{ if eq(variables['build.type.release'], 'true') }}:
      - name: Deploy.AppEnvShortCap
        value: Dev
      - name: Deploy.AppEnvShort
        value: dev
      - name: Deploy.AppEnv
        value: dev
    jobs:

    - deployment: Provision
      displayName: Provision ${{ variables['Deploy.AppEnvShortCap'] }} Environment
      environment: "NonProd-${{ variables['Deploy.AppEnvShortCap'] }}"
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubeloginInstaller@0
            
            - template: azureDevOps/template-terraform.yml@platform
              parameters: 
                service_connection: '$(Azure.Subscription.NonProd)'
                terraform_work_directory: '$(Build.SourcesDirectory)/terraform/app_env'
                tfstate_rg_name: $(Tf.State.NonProd.RG)
                tfstate_storage_account_name: $(Tf.State.NonProd.SA)
                tfstate_blob_name: $(Tf.State.NonProd.Blob)
                tfstate_file_name: '$(Deploy.PlatformEnv)-$(Deploy.AppEnv)'
                spoke_vars_file_name: '$(Deploy.AppEnvShort)'
                additional_command_options: '-var="platform_env=$(Deploy.PlatformEnv)" -var="app_env=$(Deploy.AppEnv)"'

    - deployment: "Deploy_${{ variables['Deploy.AppEnvShortCap'] }}_Blogs"
      displayName: "Deploy Blogs to NonProd-${{ variables['Deploy.AppEnvShortCap'] }}"
      environment: "NonProd-${{ variables['Deploy.AppEnvShortCap'] }}"
      dependsOn:
      - Provision
      strategy:
        runOnce:
          deploy:
            steps:
            - template: app-deployment.yml
              parameters:
                azureSubscription: '$(Azure.Subscription.NonProd)'
                acrRepositoryConnect: '$(Acr.Repository.Connect)'
                containerRegistry: '$(Acr.Repository.Name).azurecr.io'
                platformEnv: '$(Deploy.PlatformEnv)'
                appEnvShort: "${{ variables['Deploy.AppEnvShort'] }}"
                appEnv: '$(Deploy.AppEnv)'
                kubernetesNamespace: "cbd-${{ variables['Deploy.PlatformEnv'] }}-${{ variables['Deploy.AppEnv'] }}"
                serviceNameKebabCase: '$(Service.Blogs.NameKebabCase)'
                serviceVersion: '$(Service.Blogs.Version)'
        
    - deployment: "Deploy_${{ variables['Deploy.AppEnvShortCap'] }}_Web"
      displayName: "Deploy Web to NonProd-${{ variables['Deploy.AppEnvShortCap'] }}"
      environment: "NonProd-${{ variables['Deploy.AppEnvShortCap'] }}"
      dependsOn:
      - Provision
      strategy:
        runOnce:
          deploy:
            steps:
            - template: app-deployment.yml
              parameters:
                azureSubscription: '$(Azure.Subscription.NonProd)'
                acrRepositoryConnect: '$(Acr.Repository.Connect)'
                containerRegistry: '$(Acr.Repository.Name).azurecr.io'
                platformEnv: '$(Deploy.PlatformEnv)'
                appEnvShort: "${{ variables['Deploy.AppEnvShort'] }}"
                appEnv: '$(Deploy.AppEnv)'
                kubernetesNamespace: "cbd-${{ variables['Deploy.PlatformEnv'] }}-${{ variables['Deploy.AppEnv'] }}"
                serviceNameKebabCase: '$(Service.Web.NameKebabCase)'
                serviceVersion: '$(Service.Web.Version)'

  - ${{ if eq(variables['deploy.prod'], 'true') }}:
    - stage: DeployProd
      displayName: Deploy Prod-Live
      dependsOn:
      - DeployDev
      jobs:
      - deployment: DeployProd
        displayName: Deploy Containers to Prod ContainerApps
        environment: Prod-Live
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureContainerApps@1
                displayName: 'Azure Container App Deploy: codebuilddeploy'
                inputs:
                  azureSubscription: '$(Azure.Subscription.Prod)'
                  containerAppName: '$(Service.Blogs.NameKebabCase)'
                  resourceGroup: 'codebuilddeploy-rg'
                  imageToDeploy: '$(Acr.Repository.Name).azurecr.io/$(Service.Blogs.NameKebabCase):$(Service.Blogs.Version)'
                  targetPort: '8080'

              - task: AzureContainerApps@1
                displayName: 'Azure Container App Deploy: codebuilddeploy'
                inputs:
                  azureSubscription: '$(Azure.Subscription.Prod)'
                  containerAppName: '$(Service.Web.NameKebabCase)'
                  resourceGroup: 'codebuilddeploy-rg'
                  imageToDeploy: '$(Acr.Repository.Name).azurecr.io/$(Service.Web.NameKebabCase):$(Service.Web.Version)'
                  targetPort: '8080'